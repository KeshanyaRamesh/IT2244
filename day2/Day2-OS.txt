::Day2

1) awk:is a powerful text processing tool used to process and analyze text files, especially those with structured data like CSV or tab-delimited files. It operates by splitting each line into fields and allowing you to manipulate or extract specific parts of the data.

example:
xyz.csv
name,age,city
John,25,New York
Alice,30,Los Angeles
Bob,22,Boston

awk -F, '{print $1}' xyz.csv

output:
name
John
Alice
Bob

explanation:
awk: The command-line tool used for text processing and pattern scanning. It processes files line by line, splitting them into fields (columns), and allows you to perform actions on those fields.

'{print $1}': This is the awk program (a short script) that specifies what to do with the input:

$1: Refers to the first field (column) of each line. In awk, fields are indexed starting from $1 (first field), $2 (second field), etc. The fields are separated by a delimiter (e.g., space, tab, or comma).

print $1: Tells awk to print the first field of each line.

2)sed:(Stream Editor) is a powerful command-line tool used to perform basic text transformations on an input stream (file or input from a pipeline). It is commonly used for tasks such as searching, replacing, deleting, and inserting text in files or text streams.

   i) replace 
     sed 's/old_text/new_text/' filename

   example: To replace the word "apple" with "orange" in a file called fruit.txt
   sed 's/apple/orange/' fruit.txt

output: 
::before replace
I have an apple.

::after replace
I have an orange.

  ii) delete (d)
  Example: To delete the second line of a file
   
  sed '2d' file.txt
  
  output:
  ::before delete
	Line 1
	Line 2
	Line 3
	
	::after delete
	Line 1
	Line 3
	
	
3) find: The find command is used to search for files and directories on your system. You can search based on various criteria like file name, type, size, and modification date.
  
  find /home/user -name "file.txt"

4) ls -a:The ls -a command is used to list all files and directories in the current directory, including hidden files.
 ls: Lists the files and directories in the current directory.

-a: The -a option stands for "all" and includes hidden files (those that start with a dot .) in the listing

 
 
 vi abc.txt   Use it to edit and create files in the terminal.
 more abc.txt Use it to view files one screen at a time without editing.

less abc.txt View the contents of a file, with the ability to scroll both forward and backward.

file permisiion 
chmod command
4 = Read-only 

5 = Read and execute 

6 = Read and write 

7 = Read, write, and execute 

The first digit represents the owner's permissions.

The second digit represents the group's permissions.

The third digit represents the others' permissions.

example  chmod 755 abc.txt
Owner: the owner can do anything with the file.

Group: the group can read and execute the file, but not modify it.

Others: others can read and execute the file, but not modify it.


ls -ltr

ls: Lists files and directories in the current directory.

-l: Displays the output in long format, showing more details like file permissions, ownership, size, and modification date.

-t: Sorts the files by modification time, with the most recently modified files listed first.

-r: Reverses the order of the files, so the oldest files appear first instead of the newest.

::csv file:
A CSV (Comma-Separated Values) file is a plain text file where data is organized into rows and columns, with each column separated by a comma. It's commonly used for storing tabular data, like spreadsheets or databases.

::example csv file content named xyz.csv 
name,age,city
John,25,New York
Alice,30,Los Angeles
Bob,22,Boston

cut -d',' -f1,2 xyz.csv
output:
name
John
Alice
Bob

Explaantion:
-d as delimiter:

In tools like cut or awk, -d is used to specify the delimiter that separates fields in a text file. For example, in a CSV file, the delimiter is usually a comma (,).

-f1 as field:

-f1 is used to specify the field number. For example, -f1 means you want to extract the first field from each line of the file.

here,
-d',': Specifies that the delimiter is a comma (,), which is standard for CSV files.

-f1: Extracts the first field (i.e., name in this case).


::display the first 3 lines of the xyz.csv file

head -3 xyz.csv

output:
name,age,city
John,25,New York
Alice,30,Los Angeles


explanation: 
head: The head command is used to display the beginning of a file.

-3: This option specifies that you want to display the first 3 lines of the file.


::display the last 2 lines of the xyz.csv file.

output:
Bob,22,Boston
Eve,28,Chicago

explanation:
tail: The tail command is used to display the end of a file.

-2: This option specifies that you want to display the last 2 lines of the file.

::extract the first and second fields (columns) from the CSV file and save the output to a new file or the same files

cut -d, -f1,2 xyz.csv > new_xyz.csv

output:
will result in a new_xyz.csv with the following content:
name,age
John,25
Alice,30
Bob,22

Explanation:
cut -d, -f1,2: Extracts the first and second fields (columns) from xyz.csv, using a comma as the delimiter.

>: Redirects the output to a file. This can be a new file or overwrite the original file if handled carefully.


::How to find number of columns with using command 

awk -F, '{print NF; exit}' xyz.csv

output: 3


Explantion:

-F,: Sets the field delimiter to a comma.

{print NF; exit}: Prints the number of fields (NF) in the first line and then exits, which gives the number of columns in the first row.


